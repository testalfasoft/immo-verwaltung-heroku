{"version":3,"sources":["webpack:///./src/app/pages/modal-overlays/dialog/dialog-name-prompt/dialog-name-prompt.component.html","webpack:///./src/app/pages/modal-overlays/dialog/dialog-name-prompt/dialog-name-prompt.component.scss","webpack:///./src/app/pages/modal-overlays/dialog/dialog-name-prompt/dialog-name-prompt.component.ts","webpack:///./src/app/pages/modal-overlays/dialog/dialog.component.html","webpack:///./src/app/pages/modal-overlays/dialog/dialog.component.scss","webpack:///./src/app/pages/modal-overlays/dialog/dialog.component.ts","webpack:///./src/app/pages/modal-overlays/dialog/showcase-dialog/showcase-dialog.component.html","webpack:///./src/app/pages/modal-overlays/dialog/showcase-dialog/showcase-dialog.component.scss","webpack:///./src/app/pages/modal-overlays/dialog/showcase-dialog/showcase-dialog.component.ts","webpack:///./src/app/pages/modal-overlays/window/window-form/window-form.component.scss","webpack:///./src/app/pages/modal-overlays/window/window-form/window-form.component.ts","webpack:///./src/app/pages/modal-overlays/window/window.component.html","webpack:///./src/app/pages/modal-overlays/window/window.component.scss","webpack:///./src/app/pages/modal-overlays/window/window.component.ts"],"names":[],"mappings":"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","file":"default~extra-components-extra-components-module~modal-overlays-modal-overlays-module.js","sourcesContent":["module.exports = \"<nb-card>\\r\\n  <nb-card-header>Enter your name</nb-card-header>\\r\\n  <nb-card-body>\\r\\n    <input #name nbInput placeholder=\\\"Name\\\">\\r\\n  </nb-card-body>\\r\\n  <nb-card-footer>\\r\\n    <button nbButton status=\\\"danget\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n    <button nbButton status=\\\"success\\\" (click)=\\\"submit(name.value)\\\">Submit</button>\\r\\n  </nb-card-footer>\\r\\n</nb-card>\\r\\n\"","module.exports = \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host input {\\n  width: 100%; }\\n.nb-theme-default :host .btn-success {\\n  margin-left: 1rem; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host input {\\n  width: 100%; }\\n.nb-theme-cosmic :host .btn-success {\\n  margin-left: 1rem; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host input {\\n  width: 100%; }\\n.nb-theme-corporate :host .btn-success {\\n  margin-left: 1rem; }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component } from '@angular/core';\r\nimport { NbDialogRef } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-dialog-name-prompt',\r\n  templateUrl: 'dialog-name-prompt.component.html',\r\n  styleUrls: ['dialog-name-prompt.component.scss'],\r\n})\r\nexport class DialogNamePromptComponent {\r\n\r\n  constructor(protected ref: NbDialogRef<DialogNamePromptComponent>) {}\r\n\r\n  cancel() {\r\n    this.ref.close();\r\n  }\r\n\r\n  submit(name) {\r\n    this.ref.close(name);\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-12 col-lg-6 col-xxxl-3\\\">\\r\\n    <nb-card>\\r\\n      <nb-card-header>Open Dialog</nb-card-header>\\r\\n      <nb-card-body>\\r\\n        <button nbButton (click)=\\\"open()\\\">Open Dialog with component</button>\\r\\n\\r\\n        <button nbButton (click)=\\\"open2(dialog)\\\">Open Dialog with template</button>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-12 col-lg-6 col-xxxl-3\\\">\\r\\n    <nb-card>\\r\\n      <nb-card-header>Open Without Backdrop</nb-card-header>\\r\\n      <nb-card-body>\\r\\n        <button nbButton (click)=\\\"open()\\\">Open Dialog with backdrop</button>\\r\\n\\r\\n        <button nbButton (click)=\\\"openWithoutBackdrop(dialog)\\\">Open Dialog without backdrop</button>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-12 col-lg-6 col-xxxl-3\\\">\\r\\n    <nb-card>\\r\\n      <nb-card-header>Open Without Esc Close</nb-card-header>\\r\\n      <nb-card-body>\\r\\n        <button nbButton (click)=\\\"open()\\\">Open Dialog with esc close</button>\\r\\n\\r\\n        <button nbButton (click)=\\\"openWithoutEscClose(dialog)\\\">Open Dialog without esc close</button>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-12 col-lg-6 col-xxxl-3\\\">\\r\\n    <nb-card>\\r\\n      <nb-card-header>Open Without Backdrop Click</nb-card-header>\\r\\n      <nb-card-body>\\r\\n        <button nbButton (click)=\\\"open()\\\">Open Dialog with backdrop click</button>\\r\\n\\r\\n        <button nbButton (click)=\\\"openWithoutBackdropClick(dialog)\\\">Open without backdrop click</button>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-12 col-lg-6 col-xxxl-3\\\">\\r\\n    <nb-card class=\\\"form-input-card\\\">\\r\\n      <nb-card-header>Return Result From Dialog</nb-card-header>\\r\\n      <nb-card-body class=\\\"result-from-dialog\\\">\\r\\n        <button nbButton (click)=\\\"open3()\\\">Enter Name</button>\\r\\n        <br>\\r\\n        <h3 class=\\\"title\\\">Names:</h3>\\r\\n        <ul>\\r\\n          <li *ngFor=\\\"let name of names\\\">{{ name }}</li>\\r\\n        </ul>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #dialog let-data let-ref=\\\"dialogRef\\\">\\r\\n  <nb-card>\\r\\n    <nb-card-header>Template Dialog</nb-card-header>\\r\\n    <nb-card-body>{{ data }}</nb-card-body>\\r\\n    <nb-card-footer>\\r\\n      <button nbButton (click)=\\\"ref.close()\\\">Close Dialog</button>\\r\\n    </nb-card-footer>\\r\\n  </nb-card>\\r\\n</ng-template>\\r\\n\\r\\n\"","module.exports = \"/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  display: block; }\\n.nb-theme-default :host nb-card-body button {\\n    width: 100%;\\n    margin-bottom: 2rem;\\n    display: block; }\\n.nb-theme-default :host nb-card-body button:last-child {\\n      margin-bottom: 0; }\\n.nb-theme-default :host .result-from-dialog {\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column; }\\n.nb-theme-default :host .form-input-card nb-card-body {\\n  display: block; }\\n@media (max-width: 1199.98px) {\\n  .nb-theme-default :host button {\\n    padding: 0.8rem; } }\\n@media (max-width: 575.98px) {\\n  .nb-theme-default :host button {\\n    padding: 0.75rem; } }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  display: block; }\\n.nb-theme-cosmic :host nb-card-body button {\\n    width: 100%;\\n    margin-bottom: 2rem;\\n    display: block; }\\n.nb-theme-cosmic :host nb-card-body button:last-child {\\n      margin-bottom: 0; }\\n.nb-theme-cosmic :host .result-from-dialog {\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column; }\\n.nb-theme-cosmic :host .form-input-card nb-card-body {\\n  display: block; }\\n@media (max-width: 1199.98px) {\\n  .nb-theme-cosmic :host button {\\n    padding: 0.8rem; } }\\n@media (max-width: 575.98px) {\\n  .nb-theme-cosmic :host button {\\n    padding: 0.75rem; } }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  display: block; }\\n.nb-theme-corporate :host nb-card-body button {\\n    width: 100%;\\n    margin-bottom: 2rem;\\n    display: block; }\\n.nb-theme-corporate :host nb-card-body button:last-child {\\n      margin-bottom: 0; }\\n.nb-theme-corporate :host .result-from-dialog {\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column; }\\n.nb-theme-corporate :host .form-input-card nb-card-body {\\n  display: block; }\\n@media (max-width: 1199.98px) {\\n  .nb-theme-corporate :host button {\\n    padding: 0.8rem; } }\\n@media (max-width: 575.98px) {\\n  .nb-theme-corporate :host button {\\n    padding: 0.75rem; } }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, TemplateRef } from '@angular/core';\r\nimport { NbDialogService } from '@nebular/theme';\r\nimport { ShowcaseDialogComponent } from './showcase-dialog/showcase-dialog.component';\r\nimport { DialogNamePromptComponent } from './dialog-name-prompt/dialog-name-prompt.component';\r\n\r\n@Component({\r\n  selector: 'ngx-dialog',\r\n  templateUrl: 'dialog.component.html',\r\n  styleUrls: ['dialog.component.scss'],\r\n})\r\nexport class DialogComponent {\r\n\r\n  names: string[] = [];\r\n\r\n  constructor(private dialogService: NbDialogService) {}\r\n\r\n  open() {\r\n    this.dialogService.open(ShowcaseDialogComponent, {\r\n      context: {\r\n        title: 'This is a postalcode passed to the dialog component',\r\n      },\r\n    });\r\n  }\r\n\r\n  open2(dialog: TemplateRef<any>) {\r\n    this.dialogService.open(\r\n      dialog,\r\n      { context: 'this is some additional data passed to dialog' });\r\n  }\r\n\r\n  open3() {\r\n    this.dialogService.open(DialogNamePromptComponent)\r\n      .onClose.subscribe(name => name && this.names.push(name));\r\n  }\r\n\r\n  openWithoutBackdrop(dialog: TemplateRef<any>) {\r\n    this.dialogService.open(\r\n      dialog,\r\n      {\r\n        context: 'this is some additional data passed to dialog',\r\n        hasBackdrop: false,\r\n      });\r\n  }\r\n\r\n  openWithoutBackdropClick(dialog: TemplateRef<any>) {\r\n    this.dialogService.open(\r\n      dialog,\r\n      {\r\n        context: 'this is some additional data passed to dialog',\r\n        closeOnBackdropClick: false,\r\n      });\r\n  }\r\n\r\n  openWithoutEscClose(dialog: TemplateRef<any>) {\r\n    this.dialogService.open(\r\n      dialog,\r\n      {\r\n        context: 'this is some additional data passed to dialog',\r\n        closeOnEsc: false,\r\n      });\r\n  }\r\n}\r\n","module.exports = \"<nb-card>\\r\\n  <nb-card-header>{{ title }}</nb-card-header>\\r\\n  <nb-card-body>\\r\\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras convallis tincidunt tincidunt.\\r\\n    Vestibulum vulputate maximus massa vel tristique. Suspendisse potenti. Duis aliquet purus sed dictum dictum.\\r\\n    Donec fringilla, purus at fermentum imperdiet, velit enim malesuada turpis, quis luctus arcu arcu nec orci.\\r\\n    Duis eu mattis felis. Quisque sollicitudin elementum nunc vel tincidunt. Vestibulum egestas mi nec\\r\\n    iaculis varius. Morbi in risus sed sapien ultricies feugiat. Quisque pulvinar mattis purus,\\r\\n    in aliquet massa aliquet et.\\r\\n  </nb-card-body>\\r\\n  <nb-card-footer>\\r\\n    <button nbButton hero status=\\\"primary\\\" (click)=\\\"dismiss()\\\">Dismiss Dialog</button>\\r\\n  </nb-card-footer>\\r\\n</nb-card>\\r\\n\"","module.exports = \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card {\\n  max-width: 600px;\\n  max-height: 500px; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card {\\n  max-width: 600px;\\n  max-height: 500px; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card {\\n  max-width: 600px;\\n  max-height: 500px; }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, Input } from '@angular/core';\r\nimport { NbDialogRef } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-showcase-dialog',\r\n  templateUrl: 'showcase-dialog.component.html',\r\n  styleUrls: ['showcase-dialog.component.scss'],\r\n})\r\nexport class ShowcaseDialogComponent {\r\n\r\n  @Input() title: string;\r\n\r\n  constructor(protected ref: NbDialogRef<ShowcaseDialogComponent>) {}\r\n\r\n  dismiss() {\r\n    this.ref.close();\r\n  }\r\n}\r\n","module.exports = \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host /deep/ .form {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column; }\\n.nb-theme-default :host /deep/ .form .text-label {\\n    margin-top: 1.5rem; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host /deep/ .form {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column; }\\n.nb-theme-cosmic :host /deep/ .form .text-label {\\n    margin-top: 1.5rem; }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host /deep/ .form {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column; }\\n.nb-theme-corporate :host /deep/ .form .text-label {\\n    margin-top: 1.5rem; }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component } from '@angular/core';\r\nimport { NbWindowRef } from '@nebular/theme';\r\n\r\n@Component({\r\n  template: `\r\n    <form class=\"form\">\r\n      <label for=\"subject\">Subject:</label>\r\n      <input nbInput id=\"subject\" type=\"text\">\r\n\r\n      <label class=\"text-label\" for=\"text\">Text:</label>\r\n      <textarea nbInput id=\"text\"></textarea>\r\n    </form>\r\n  `,\r\n  styleUrls: ['window-form.component.scss'],\r\n})\r\nexport class WindowFormComponent {\r\n  constructor(public windowRef: NbWindowRef) {}\r\n\r\n  close() {\r\n    this.windowRef.close();\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-md-12 col-lg-12 col-xxxl-6\\\">\\r\\n    <nb-card>\\r\\n      <nb-card-header>Window Form</nb-card-header>\\r\\n      <nb-card-body>\\r\\n        <button (click)=\\\"openWindowForm()\\\" nbButton>Open window form</button>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-md-12 col-lg-12 col-xxxl-6\\\">\\r\\n    <nb-card>\\r\\n      <nb-card-header>Window Without Backdrop</nb-card-header>\\r\\n      <nb-card-body>\\r\\n        <button (click)=\\\"openWindow(contentTemplate)\\\" nbButton>Open window with backdrop</button>\\r\\n\\r\\n        <button (click)=\\\"openWindowWithoutBackdrop()\\\" nbButton>Open window without backdrop</button>\\r\\n      </nb-card-body>\\r\\n    </nb-card>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #contentTemplate let-data>\\r\\n  <p>Here is the text provided via config: \\\"{{ data.title }}\\\"</p>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #disabledEsc>\\r\\n  Disabled close on escape click.\\r\\n</ng-template>\\r\\n\"","module.exports = \"/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host button + button {\\n  margin-left: 2rem; }\\n@media (max-width: 1599.98px) {\\n  .nb-theme-default :host nb-card-body {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex; }\\n  .nb-theme-default :host button {\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1;\\n            flex: 1;\\n    padding: 0.8rem; } }\\n@media (max-width: 575.98px) {\\n  .nb-theme-default :host nb-card-body {\\n    display: block; }\\n  .nb-theme-default :host button {\\n    width: 100%;\\n    display: block;\\n    margin-bottom: 2rem;\\n    padding: 0.75rem; }\\n    .nb-theme-default :host button + button {\\n      margin-left: 0; } }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host button + button {\\n  margin-left: 2rem; }\\n@media (max-width: 1599.98px) {\\n  .nb-theme-cosmic :host nb-card-body {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex; }\\n  .nb-theme-cosmic :host button {\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1;\\n            flex: 1;\\n    padding: 0.8rem; } }\\n@media (max-width: 575.98px) {\\n  .nb-theme-cosmic :host nb-card-body {\\n    display: block; }\\n  .nb-theme-cosmic :host button {\\n    width: 100%;\\n    display: block;\\n    margin-bottom: 2rem;\\n    padding: 0.75rem; }\\n    .nb-theme-cosmic :host button + button {\\n      margin-left: 0; } }\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host button + button {\\n  margin-left: 2rem; }\\n@media (max-width: 1599.98px) {\\n  .nb-theme-corporate :host nb-card-body {\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex; }\\n  .nb-theme-corporate :host button {\\n    -webkit-box-flex: 1;\\n        -ms-flex: 1;\\n            flex: 1;\\n    padding: 0.8rem; } }\\n@media (max-width: 575.98px) {\\n  .nb-theme-corporate :host nb-card-body {\\n    display: block; }\\n  .nb-theme-corporate :host button {\\n    width: 100%;\\n    display: block;\\n    margin-bottom: 2rem;\\n    padding: 0.75rem; }\\n    .nb-theme-corporate :host button + button {\\n      margin-left: 0; } }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, TemplateRef, ViewChild } from '@angular/core';\r\nimport { NbWindowService } from '@nebular/theme';\r\nimport { WindowFormComponent } from './window-form/window-form.component';\r\n\r\n@Component({\r\n  selector: 'ngx-window',\r\n  templateUrl: 'window.component.html',\r\n  styleUrls: ['window.component.scss'],\r\n})\r\nexport class WindowComponent {\r\n\r\n  @ViewChild('contentTemplate') contentTemplate: TemplateRef<any>;\r\n  @ViewChild('disabledEsc', { read: TemplateRef }) disabledEscTemplate: TemplateRef<HTMLElement>;\r\n\r\n  constructor(private windowService: NbWindowService) {}\r\n\r\n  openWindow(contentTemplate) {\r\n    this.windowService.open(\r\n      contentTemplate,\r\n      {\r\n        title: 'Window content from template',\r\n        context: {\r\n          text: 'some text to pass into template',\r\n        },\r\n      },\r\n    );\r\n  }\r\n\r\n  openWindowForm() {\r\n    this.windowService.open(WindowFormComponent, { title: `Window` });\r\n  }\r\n\r\n  openWindowWithoutBackdrop() {\r\n    this.windowService.open(\r\n      this.disabledEscTemplate,\r\n      {\r\n        title: 'Window without backdrop',\r\n        hasBackdrop: false,\r\n        closeOnEsc: false,\r\n      },\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}